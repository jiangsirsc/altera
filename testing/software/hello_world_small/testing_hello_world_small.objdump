
testing_hello_world_small.elf:     file format elf32-littlenios2
testing_hello_world_small.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000002f4 memsz 0x000002f4 flags r-x
    LOAD off    0x00001314 vaddr 0x00010314 paddr 0x00010318 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000131c vaddr 0x0001031c paddr 0x0001031c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000002e4  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  00010304  00010304  00001304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000004  00010314  00010318  00001314  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  0001031c  0001031c  0000131c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000188  00000000  00000000  00001340  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000d7b  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007b2  00000000  00000000  00002243  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000971  00000000  00000000  000029f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000198  00000000  00000000  00003368  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000597  00000000  00000000  00003500  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001f1  00000000  00000000  00003a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000020  00000000  00000000  00003c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000078  00000000  00000000  00003ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00004a74  2**0
                  CONTENTS, READONLY
 16 .cpu          00000003  00000000  00000000  00004a77  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  00004a7a  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00004a7b  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   0000000b  00000000  00000000  00004a7c  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    0000000b  00000000  00000000  00004a87  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   0000000b  00000000  00000000  00004a92  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 00000007  00000000  00000000  00004a9d  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 00000039  00000000  00000000  00004aa4  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     00034cdb  00000000  00000000  00004add  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .text	00000000 .text
00010304 l    d  .rodata	00000000 .rodata
00010314 l    d  .rwdata	00000000 .rwdata
0001031c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /data/pace/scratch03/tractp1/hardware/altera/testing/software/bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 
000101d0 g     F .text	0000002c alt_main
00010318 g       *ABS*	00000000 __flash_rwdata_start
000101fc g     F .text	00000038 alt_putstr
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010320 g     O .bss	00000004 alt_argv
00018314 g       *ABS*	00000000 _gp
000102a4 g     F .text	00000038 alt_icache_flush
00010328 g       *ABS*	00000000 __bss_end
0001028c g     F .text	00000004 alt_dcache_flush_all
00010318 g       *ABS*	00000000 __ram_rwdata_end
00010314 g       *ABS*	00000000 __ram_rodata_end
00010314 g     O .rwdata	00000004 jtag_uart_0
00010328 g       *ABS*	00000000 end
0001fffc g       *ABS*	00000000 __alt_stack_pointer
00010258 g     F .text	00000034 altera_avalon_jtag_uart_write
00010020 g     F .text	0000003c _start
00010254 g     F .text	00000004 alt_sys_init
00010314 g       *ABS*	00000000 __ram_rwdata_start
00010304 g       *ABS*	00000000 __ram_rodata_start
00010328 g       *ABS*	00000000 __alt_stack_base
0001031c g       *ABS*	00000000 __bss_start
0001005c g     F .text	00000070 main
0001031c g     O .bss	00000004 alt_envp
00010304 g       *ABS*	00000000 __flash_rodata_start
00010234 g     F .text	00000020 alt_irq_init
00010000 g       *ABS*	00000000 __alt_mem_MEMORY
00010324 g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010318 g       *ABS*	00000000 _edata
00010328 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
0001029c g     F .text	00000008 altera_nios2_qsys_irq_init
0001fffc g       *ABS*	00000000 __alt_data_end
0001001c g       .entry	00000000 _exit
000102dc g     F .text	00000028 strlen
00010290 g     F .text	0000000c alt_icache_flush_all
000100cc g     F .text	00000104 alt_load



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08400814 	ori	at,at,32
    jmp r1
   10018:	0800683a 	jmp	at

0001001c <_exit>:
   1001c:	00000000 	call	0 <__alt_mem_MEMORY-0x10000>

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	deffff14 	ori	sp,sp,65532
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a0c514 	ori	gp,gp,33556
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	1080c714 	ori	r2,r2,796

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c0ca14 	ori	r3,r3,808

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00100cc0 	call	100cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00101d00 	call	101d0 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <alt_after_alt_main>

0001005c <main>:
	volatile alt_u32 outclear;
}PIO_REGS_TypeDef;

#define LEDS ((PIO_REGS_TypeDef *) LEDS_BASE)
int main()
{ 
   1005c:	defffe04 	addi	sp,sp,-8


  alt_putstr("Hi\n");
   10060:	01000074 	movhi	r4,1
   10064:	2100c104 	addi	r4,r4,772
	volatile alt_u32 outclear;
}PIO_REGS_TypeDef;

#define LEDS ((PIO_REGS_TypeDef *) LEDS_BASE)
int main()
{ 
   10068:	dc000015 	stw	r16,0(sp)
   1006c:	dfc00115 	stw	ra,4(sp)


  alt_putstr("Hi\n");
   10070:	00101fc0 	call	101fc <alt_putstr>
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x01);
   10074:	040000b4 	movhi	r16,2
   10078:	84040c04 	addi	r16,r16,4144
   1007c:	00800044 	movi	r2,1
   10080:	80800035 	stwio	r2,0(r16)
  alt_putstr("1\n");
   10084:	01000074 	movhi	r4,1
   10088:	2100c204 	addi	r4,r4,776
   1008c:	00101fc0 	call	101fc <alt_putstr>
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x00);
   10090:	80000035 	stwio	zero,0(r16)
   alt_putstr("2\n");
   10094:	01000074 	movhi	r4,1
   10098:	2100c304 	addi	r4,r4,780
   1009c:	00101fc0 	call	101fc <alt_putstr>
   LEDS->data = 0x02;
   100a0:	00800084 	movi	r2,2
   100a4:	80800015 	stw	r2,0(r16)
   LEDS->data = 0x04;
   100a8:	00800104 	movi	r2,4
   100ac:	80800015 	stw	r2,0(r16)
   LEDS->data = 0x08;
   100b0:	00800204 	movi	r2,8
   100b4:	80800015 	stw	r2,0(r16)
   LEDS->data = 0x00;
   100b8:	80000015 	stw	zero,0(r16)
   alt_putstr("3\n");
   100bc:	01000074 	movhi	r4,1
   100c0:	2100c404 	addi	r4,r4,784
   100c4:	00101fc0 	call	101fc <alt_putstr>
   100c8:	003fff06 	br	100c8 <main+0x6c>

000100cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   100cc:	deffff04 	addi	sp,sp,-4
   100d0:	dfc00015 	stw	ra,0(sp)
   100d4:	00c00074 	movhi	r3,1
   100d8:	18c0c504 	addi	r3,r3,788
   100dc:	01000074 	movhi	r4,1
   100e0:	2100c604 	addi	r4,r4,792

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   100e4:	1900061e 	bne	r3,r4,10100 <alt_load+0x34>
   100e8:	00c00074 	movhi	r3,1
   100ec:	18c00804 	addi	r3,r3,32
   100f0:	01000074 	movhi	r4,1
   100f4:	21000804 	addi	r4,r4,32
   100f8:	1900151e 	bne	r3,r4,10150 <alt_load+0x84>
   100fc:	00000e06 	br	10138 <alt_load+0x6c>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
   10100:	01400074 	movhi	r5,1
   10104:	2940c604 	addi	r5,r5,792
   10108:	00bfff04 	movi	r2,-4
   1010c:	28cbc83a 	sub	r5,r5,r3
   10110:	288a703a 	and	r5,r5,r2
   10114:	0005883a 	mov	r2,zero
   10118:	00000506 	br	10130 <alt_load+0x64>
   1011c:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
   10120:	39c00017 	ldw	r7,0(r7)
   10124:	188d883a 	add	r6,r3,r2
   10128:	10800104 	addi	r2,r2,4
   1012c:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10130:	117ffa1e 	bne	r2,r5,1011c <alt_load+0x50>
   10134:	003fec06 	br	100e8 <alt_load+0x1c>
   10138:	00c00074 	movhi	r3,1
   1013c:	18c0c104 	addi	r3,r3,772
   10140:	01000074 	movhi	r4,1
   10144:	2100c104 	addi	r4,r4,772

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10148:	1900131e 	bne	r3,r4,10198 <alt_load+0xcc>
   1014c:	00000e06 	br	10188 <alt_load+0xbc>
   10150:	01400074 	movhi	r5,1
   10154:	29400804 	addi	r5,r5,32
   10158:	00bfff04 	movi	r2,-4
   1015c:	28cbc83a 	sub	r5,r5,r3
   10160:	288a703a 	and	r5,r5,r2
   10164:	0005883a 	mov	r2,zero
   10168:	00000506 	br	10180 <alt_load+0xb4>
   1016c:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
   10170:	39c00017 	ldw	r7,0(r7)
   10174:	188d883a 	add	r6,r3,r2
   10178:	10800104 	addi	r2,r2,4
   1017c:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10180:	117ffa1e 	bne	r2,r5,1016c <alt_load+0xa0>
   10184:	003fec06 	br	10138 <alt_load+0x6c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10188:	001028c0 	call	1028c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   1018c:	dfc00017 	ldw	ra,0(sp)
   10190:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10194:	00102901 	jmpi	10290 <alt_icache_flush_all>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
   10198:	01400074 	movhi	r5,1
   1019c:	2940c504 	addi	r5,r5,788
   101a0:	00bfff04 	movi	r2,-4
   101a4:	28cbc83a 	sub	r5,r5,r3
   101a8:	288a703a 	and	r5,r5,r2
   101ac:	0005883a 	mov	r2,zero
   101b0:	00000506 	br	101c8 <alt_load+0xfc>
   101b4:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
   101b8:	39c00017 	ldw	r7,0(r7)
   101bc:	188d883a 	add	r6,r3,r2
   101c0:	10800104 	addi	r2,r2,4
   101c4:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   101c8:	117ffa1e 	bne	r2,r5,101b4 <alt_load+0xe8>
   101cc:	003fee06 	br	10188 <alt_load+0xbc>

000101d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   101d0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   101d4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   101d8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   101dc:	00102340 	call	10234 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   101e0:	00102540 	call	10254 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   101e4:	d1200417 	ldw	r4,-32752(gp)
   101e8:	d1600317 	ldw	r5,-32756(gp)
   101ec:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   101f0:	dfc00017 	ldw	ra,0(sp)
   101f4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   101f8:	001005c1 	jmpi	1005c <main>

000101fc <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   101fc:	defffe04 	addi	sp,sp,-8
   10200:	dc000015 	stw	r16,0(sp)
   10204:	dfc00115 	stw	ra,4(sp)
   10208:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   1020c:	00102dc0 	call	102dc <strlen>
   10210:	01000074 	movhi	r4,1
   10214:	2100c504 	addi	r4,r4,788
   10218:	800b883a 	mov	r5,r16
   1021c:	100d883a 	mov	r6,r2
   10220:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
   10224:	dfc00117 	ldw	ra,4(sp)
   10228:	dc000017 	ldw	r16,0(sp)
   1022c:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10230:	00102581 	jmpi	10258 <altera_avalon_jtag_uart_write>

00010234 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10234:	deffff04 	addi	sp,sp,-4
   10238:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
   1023c:	001029c0 	call	1029c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10240:	00800044 	movi	r2,1
   10244:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10248:	dfc00017 	ldw	ra,0(sp)
   1024c:	dec00104 	addi	sp,sp,4
   10250:	f800283a 	ret

00010254 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10254:	f800283a 	ret

00010258 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   10258:	20c00017 	ldw	r3,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1025c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   10260:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10264:	19800104 	addi	r6,r3,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   10268:	00000606 	br	10284 <altera_avalon_jtag_uart_write+0x2c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1026c:	31c00037 	ldwio	r7,0(r6)
   10270:	39ffffec 	andhi	r7,r7,65535
   10274:	383ffd26 	beq	r7,zero,1026c <altera_avalon_jtag_uart_write+0x14>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10278:	29c00007 	ldb	r7,0(r5)
   1027c:	29400044 	addi	r5,r5,1
   10280:	19c00035 	stwio	r7,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   10284:	293ff936 	bltu	r5,r4,1026c <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   10288:	f800283a 	ret

0001028c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1028c:	f800283a 	ret

00010290 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10290:	0009883a 	mov	r4,zero
   10294:	01440004 	movi	r5,4096
   10298:	00102a41 	jmpi	102a4 <alt_icache_flush>

0001029c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   1029c:	000170fa 	wrctl	ienable,zero
   102a0:	f800283a 	ret

000102a4 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   102a4:	00840004 	movi	r2,4096
   102a8:	1140012e 	bgeu	r2,r5,102b0 <alt_icache_flush+0xc>
   102ac:	100b883a 	mov	r5,r2
   102b0:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   102b4:	2005883a 	mov	r2,r4
   102b8:	00000206 	br	102c4 <alt_icache_flush+0x20>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   102bc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   102c0:	10800804 	addi	r2,r2,32
   102c4:	117ffd36 	bltu	r2,r5,102bc <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   102c8:	210007cc 	andi	r4,r4,31
   102cc:	20000126 	beq	r4,zero,102d4 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   102d0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   102d4:	0000203a 	flushp
   102d8:	f800283a 	ret

000102dc <strlen>:
   102dc:	20800007 	ldb	r2,0(r4)
   102e0:	10000626 	beq	r2,zero,102fc <strlen+0x20>
   102e4:	2005883a 	mov	r2,r4
   102e8:	10800044 	addi	r2,r2,1
   102ec:	10c00007 	ldb	r3,0(r2)
   102f0:	183ffd1e 	bne	r3,zero,102e8 <strlen+0xc>
   102f4:	1105c83a 	sub	r2,r2,r4
   102f8:	f800283a 	ret
   102fc:	0005883a 	mov	r2,zero
   10300:	f800283a 	ret
